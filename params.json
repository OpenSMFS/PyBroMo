{"name":"Pybromo","tagline":"A single-molecule brownian motion diffusion simulator in confocal geometry.","body":"Overview\r\n=======\r\n\r\n**[PyBroMo](http://tritemio.github.io/PyBroMo/)** is an open-source simulator \r\nfor Brownian-motion diffusion and photon emission of fluorescent particles \r\nexcited by a diffraction limited laser spot.\r\nPyBroMo allows to simulate timestamps of photons emitted during \r\n[smFRET](http://en.wikipedia.org/wiki/Single-molecule_FRET) experiments, \r\nincluding sample background and detectors dark counts.\r\n\r\nThe program simulates 3-D Brownian motion trajectories and emission of an arbitrary number of particles freely diffusing in a simulation volume (a box). \r\nInside the simulation box a laser excitation volume (the \r\n[PSF](http://en.wikipedia.org/wiki/Point_spread_function) of the objective lens)\r\nis defined numerically or analytically (Gaussian shape).  Molecules diffusing \r\nthrough the excitation volume emit photons at a rate proportional to the \r\nlocal excitation intensity.\r\n\r\nA precomputed numerical [PSF](http://en.wikipedia.org/wiki/Point_spread_function)\r\nis included and used by default.\r\nThe included numerical PSF is computed through\r\n[rigorous vectorial electromagnetic computations]\r\n(http://dx.doi.org/10.1364/JOSAA.27.000295) using the\r\n[PSFLab](http://onemolecule.chem.uwm.edu/software) software. \r\nThe user can provide a different numerical PSF or,\r\nalternatively, use an analytical Gaussian-shaped PSF.\r\n\r\nAn overview of the architecture of the simulator can be found \r\n[below](#architecture).\r\n\r\nThe user documentation is provided in a series of [IPython Notebook](http://ipython.org/notebook.html) \r\n(see **[Usage examples](#usage-examples)**). \r\n\r\nBug fixes and/or enhancements are welcome, just send a [pull request (PR)](https://help.github.com/articles/using-pull-requests).\r\n\r\nFor more info contact me at tritemio@gmail.com.\r\n\r\nEnvironment\r\n==========\r\n\r\nPyBroMo is written in the [python programming language](http://www.python.org/) using the standard \r\nscientific stack of libraries (numpy, scipy, matplotlib).\r\n\r\nUsage examples are given as \r\nIPython notebooks. \r\n[IPython Notebook](http://ipython.org/notebook.html) is an interactive web-based environment that allows to mix rich text, math and graphics with (live) code, similarly to the Mathematica environment. \r\nYou can find a static HTML version of the notebooks below in section **[Usage examples](#usage-examples)**. \r\n\r\nMoreover the [IPython environment](http://ipython.org/) allows to easily setup a cluster for parallel computing. Therefore simulation time can be\r\ngreatly reduced using a single multi-core PC, multiple PC or a cloud-computing service. Examples on how to perform parallel simulation are provided in the notebooks.\r\n\r\nFor a tutorial on python in science:\r\n\r\n* [Python Scientific Lecture Notes](http://scipy-lectures.github.io/)\r\n\r\nYou may also want to check these links to the IPython documentation:\r\n\r\n* [The IPython Notebook](http://ipython.org/ipython-doc/stable/interactive/notebook.html)\r\n* [Using IPython for parallel computing](http://ipython.org/ipython-doc/stable/parallel/index.html)\r\n\r\n\r\n#Installation\r\n\r\n##MS Windows\r\n\r\nIn order to run the code you need to install a scientific python\r\ndistribution like [Anaconda](https://store.continuum.io/cshop/anaconda/).\r\nThe free version of Anaconda includes all the needed dependencies.\r\nAny other scientific python distribution (for example \r\n[Enthought Canopy](https://www.enthought.com/products/canopy/)) \r\nwill work as well.\r\n \r\nOnce a python distribution is installed, download the latest version\r\nof [PyBroMo](https://github.com/tritemio/PyBroMo) from *GitHub*. \r\nIt's suggested to start using the simulator\r\nlaunching an IPython Notebook server in the PyBroMo notebook folder\r\n(see the following paragraph) and playing with the examples.\r\n\r\n###Configuring IPython Notebook\r\n\r\nYou need to configure the IPython Notebook launcher to start in the PyBroMo notebook folder. If you put PyBroMo in `C:\\PyBroMo` then the notebooks folder will be `C:\\PyBroMo\\notebooks`.\r\n\r\nJust right click on the *IPython Notebook icon* -> *Properties* and paste \r\nthe notebook folder in *Start in*. Apply and close.\r\n\r\nNow, double click on the icon and a browser should pop up showing the list\r\nof notebooks. Chrome browser is suggested.\r\n\r\n##Linux and Mac OS X\r\n\r\nOn Linux or Mac OS X you can also use the [Anaconda](https://store.continuum.io/cshop/anaconda/) distribution.\r\n\r\nAlternatively you can install the following requirements (hint: on Mac OS X you can use MacPorts):\r\n\r\n - python 2.7.x\r\n - IPython 1.x\r\n - matplotlib 1.3.x or greater\r\n - numpy/scipy (any recent version)\r\n - modern browser (Chrome suggested)\r\n\r\n#Architecture\r\nThe simulation domain is defined as 3-D box, centered around the origin. The dimension on each direction (x, y, z) can be different. Periodic boundary conditions are applied.\r\n\r\nA particle is described by its initial position. A list of particles with random initial position is generated by an utility function before running the simulation.\r\n\r\nThe excitation PSF is a function of the position and is centered with maximum on the origin. A realistic PSF obtained by vectorial electromagnetic simulation is precomputed using [PSFLab](http://onemolecule.chem.uwm.edu/software). The PSF is computed for a single wavelength and includes effects such as refractive index mismatch and mismatch between the objective lens correction and the cover-glass thickness. The user can  generate a different PSF using [PSFLab](http://onemolecule.chem.uwm.edu/software). The PSF is generated using circular polarized light so it has cylindrical symmetry and can precomputed only on the x-z plane.\r\nAlternatively, a simple Gaussian PSF can also be used.\r\n\r\nThe Brownian motion parameters are: the diffusion coefficient, the simulation box, the list of particles, the simulation time step and the simulation final time. \r\n\r\nThe Brownian  motion simulation uses constant timesteps (typically 0.5 Î¼s). \r\nThis allows a straightforward and efficient implementation. \r\nIn fact, the trajectory is computed\r\nin a single operation, integrating the (random) array of displacements with the\r\n[`cumsum`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html) command. The drawback of this approach is the high RAM usage, although the\r\nproblem can be mitigated (see below).\r\n\r\nThe instantaneous emission rate of the particle is computed during the Brownian motion simulation, evaluating the PSF intensity at each position. Once the emission rate is computed at all the timesteps, photons are generated stochastically from a [Poisson process](http://en.wikipedia.org/wiki/Poisson_process). The rate of the Poisson process is the sum of the instantaneous emission rate and the background rate. The time bin in which a photon is extracted \r\nis used as the photon (or dark count) timestamp. \r\nPhoto-physics effects, such as blinking and bleaching, are not currently \r\nmodeled.\r\nHowever these effect can be easily included simply \"modulating\" the emission \r\nrates before generating the photons.\r\n\r\nTo overcome the problem of high RAM usage of long simulations, the user can choose to delete the particle trajectory after the emission trace has been computed. Moreover, is possible to save a single cumulative array of emissions (for all the particles) instead of having a separate emission trace for each particle. Finally, the computation can be distributed on the nodes of a cluster (IPython cluster). Several batches of simulation can be executed on each node, making possible to simulate an arbitrary long experiment on limited hardware. Thanks to the IPython infrastructure the simulation can be seamless run on a single machine, on a cluster of machines or on a cloud computing server.\r\n\r\n#Usage examples\r\n\r\nThe following links will open (a static version of) the notebooks provided\r\nwith PyBroMo. This collection serves both as usage examples and user guide.\r\nIf you install the software (see [**Installation**](#installation) section) these notebooks can be\r\nexecuted.\r\n\r\n* [1.1 Run simulation - Single host](http://nbviewer.ipython.org/urls/raw.github.com/tritemio/PyBroMo/master/notebooks/PyBroMo%2520-%25201.1%2520Run%2520simulation%2520-%2520Single%2520host.ipynb)\r\n* [1.2 Run simulation - Parallel](http://nbviewer.ipython.org/urls/raw.github.com/tritemio/PyBroMo/master/notebooks/PyBroMo%2520-%25201.2%2520Run%2520simulation%2520-%2520Parallel.ipynb)\r\n* [2. Generate timestamps - Parallel](http://nbviewer.ipython.org/urls/raw.github.com/tritemio/PyBroMo/master/notebooks/PyBroMo%2520-%25202.%2520Generate%2520timestamps%2520-%2520Parallel.ipynb)\r\n* [3. Generate and export smFRET data](http://nbviewer.ipython.org/urls/raw.github.com/tritemio/PyBroMo/master/notebooks/PyBroMo%2520-%25203.%2520Generate%2520and%2520export%2520smFRET%2520data.ipynb)\r\n\r\n\r\n#Acknowledgements\r\n\r\nI wish to thank Xavier Michalet for useful discussions and insight.\r\n\r\nThis work was supported by NIH grants R01 GM069709  and R01 GM095904.\r\n\r\n#License and Copyrights\r\n\r\nPyBroMo - A single molecule diffusion simulator in confocal geometry.\r\n\r\nCopyright (C) 2013  Antonino Ingargiola - <tritemio@gmail.com>\r\n\r\n    This program is free software; you can redistribute it and/or\r\n    modify it under the terms of the GNU General Public License\r\n    as published by the Free Software Foundation; either version 2\r\n    of the License, or (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You can find a full copy of the license in the file LICENSE.txt\r\n\r\n\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/7af364b00f555df7cf02932a38b05ddc \"githalytics.com\")](http://githalytics.com/tritemio/PyBroMo)\r\n","google":"UA-44142116-1","note":"Don't delete this file! It's used internally to help with page regeneration."}