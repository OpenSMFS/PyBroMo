{"name":"PyBroMo","tagline":"A single-molecule brownian motion diffusion smFRET simulator in confocal geometry.","body":"# PyBroMo Overview\r\n\r\n<div>\r\n<img title=\"Numerical PSF\" src=\"https://cloud.githubusercontent.com/assets/4156237/11383966/b5781438-92c0-11e5-982c-0499b95dac43.png\" height=\"110\" />\r\n<img title=\"Particles Trajectories\" src=\"https://cloud.githubusercontent.com/assets/4156237/11383974/c3020bae-92c0-11e5-86d7-0f41055e2095.png\" height=\"110\" />\r\n<img title=\"Simulated smFRET timetrace, bursts and FRET histogram\" src=\"https://cloud.githubusercontent.com/assets/4156237/11384620/11051666-92c6-11e5-871e-041e71839f22.png\" height=\"110\" />\r\n</div>\r\n\r\n**[PyBroMo](http://tritemio.github.io/PyBroMo/)** is an open-source simulator\r\nfor Brownian-motion diffusion and photon emission of fluorescent particles\r\nexcited by a diffraction limited laser spot.\r\nPyBroMo allows to simulate timestamps of photons emitted during\r\n[smFRET](http://en.wikipedia.org/wiki/Single-molecule_FRET) experiments,\r\nincluding sample background and detectors dark counts and to save the results in\r\nin [Photon-HDF5](http://photon-hdf5.org) format. The smFRET data files can\r\nbe analyzed with any smFRET burst analysis software.\r\n\r\n> For an opensource smFRET burst analysis software supporting Photon-HDF5 see [FRETBursts](https://github.com/tritemio/FRETBursts).\r\n\r\nPyBromo simulates 3-D Brownian motion trajectories and emission of an\r\narbitrary number of particles freely diffusing in a simulation volume (a box).\r\nInside the simulation box a laser excitation volume (the\r\n[PSF](http://en.wikipedia.org/wiki/Point_spread_function) of the objective lens)\r\nis defined numerically or analytically (Gaussian shape). Particles diffusing\r\nthrough the excitation volume emit photons at a rate proportional to the\r\nlocal excitation intensity.\r\n\r\nA precomputed numerical [PSF](http://en.wikipedia.org/wiki/Point_spread_function)\r\nis included and used by default.\r\nThe included numerical PSF is computed through\r\nrigorous vectorial electromagnetic computations ([Nasse, Woehl 2010]\r\n(http://dx.doi.org/10.1364/JOSAA.27.000295)) using the\r\n[PSFLab](http://onemolecule.chem.uwm.edu/software) software.\r\nThe user can provide a different numerical PSF or,\r\nalternatively, use an analytical Gaussian-shaped PSF.\r\n\r\nAn overview of the architecture of the simulator can be found\r\n[below](#architecture).\r\n\r\nThe user documentation is provided in a series of [Jupyter](http://jupyter.org) notebooks\r\n(see **[Usage examples](#usage-examples)**).\r\n\r\n# Feedback\r\n\r\nIf you have a question or find a bug in PyBroMo please open a GitHub Issue.\r\nBug fixes and/or enhancements are welcome, just send a [pull request (PR)](https://help.github.com/articles/using-pull-requests).\r\n\r\nFor more info contact me at tritemio@gmail.com.\r\n\r\n# Environment\r\n\r\nPyBroMo is written in the [python programming language](http://www.python.org/)\r\nusing the standard scientific stack of libraries (numpy, scipy, pytables,\r\nmatplotlib).\r\n\r\nUsage examples are given as\r\nJupyter/IPython notebooks.\r\n[Jupyter Notebook](http://jupyter.org/) is an interactive web-based environment that allows to mix rich text, math and graphics with (live) code.\r\nYou can find a static HTML version of the notebooks below in section **[Usage examples](#usage-examples)**.\r\n\r\nMoreover the [IPython environment](http://ipython.org/) allows to easily setup a cluster for parallel computing. Therefore simulation time can be\r\ngreatly reduced using a single multi-core PC, multiple PC or a cloud-computing service.\r\n\r\nIf you are new to Jupyter Notebook, refer to this guide for installation and first steps:\r\n\r\n- [Jupyter/IPython Notebook Quick Start Guide](http://jupyter-notebook-beginner-guide.readthedocs.org)\r\n\r\n# Architecture\r\n\r\nThe simulation domain is defined as 3-D box, centered around the origin. \r\nAs boundary conditions particles can be either reflected at the interface (\"mirror\" condition) \r\nor reinjected from the opposite face (\"periodic\" condition).\r\n\r\nA particle is described by its initial position. A list of particles with random initial position \r\nis generated before running the diffusion simulation.\r\n\r\nThe excitation PSF is a function of the position and is centered with maximum on the origin. \r\nA realistic PSF obtained by vectorial electromagnetic simulation is precomputed using \r\n[PSFLab](http://onemolecule.chem.uwm.edu/software). The PSF is computed for a\r\nwater immersion objective (NA = 1.2) at 532 nm\r\nand includes effects such as refractive index mismatch and mismatch between the objective lens \r\ncorrection and the cover-glass thickness. The user can  generate a different PSF using \r\n[PSFLab](http://onemolecule.chem.uwm.edu/software) or equivalent software. The PSF is generated \r\nusing circular polarized light so it has cylindrical symmetry and it is precomputed only on the x-z plane.\r\nAlternatively, a simple Gaussian PSF can also be used.\r\n\r\nThe Brownian motion parameters are: the diffusion coefficient, the simulation box, \r\nthe list of particles, the simulation time step and the simulation duration.\r\n\r\nThe Brownian motion simulation uses constant time-steps (typically 0.5 Î¼s).\r\nThis allows a straightforward and efficient implementation.\r\nThe total simulation time is divided in chunks so that trajectories for a single chunk\r\ncan easily fit in RAM. For each chunk, trajectories are computed by \r\ncumulative sum ([`cumsum`](http://docs.scipy.org/doc/numpy/reference/generated/numpy.cumsum.html)) \r\nof the array of Gaussian displacement.\r\n\r\nThe instantaneous emission rate of each particle is computed during the Brownian motion simulation\r\nby evaluating the PSF intensity at each position. After the diffusion simulation, for each particle, \r\nphotons are generated from a [Poisson process](http://en.wikipedia.org/wiki/Poisson_process) using the \r\npreviously computed emission rates. An additional constant Poisson process models sample background \r\nand detectors' dark counts. The time bin in which a \"count\" (photon or background) is extracted\r\nbecomes the timestamp.\r\n\r\nPyBroMo provides functions to simulate one or multiple FRET populations,\r\nsaving the results in regular smFRET data files in Photon-HDF5 format. For each timestamp,\r\nthe particle ID is also saved, allowing to separate the contribution of each particle.\r\nPhoto-physics effects, such as blinking and bleaching, are not explicily \r\nmodeled but they can be easily included \"modulating\" the emission\r\nrates before generating the photons.\r\nTwo-states systems (each state with a different FRET efficiency) can be also \r\nsimulated. In this case, the user needs to generate a static smFRET data file for each state\r\n(from the same diffusion trajectories). Next, transition times (switch-points) can be\r\ncomputed (e.g. drawing exponetial random variables) for each particle until the simulation \r\nduration is covered. Finally, the user can create a new  \r\nsmFRET data file by selecting timestamps from each static-state file\r\naccording to the generated transitions.\r\n\r\nAs a final note, PyBroMo computations can be performed on a single core\r\nor distributed on the nodes of a cluster (IPython cluster). \r\nThanks to the IPython infrastructure the simulation can be seamless run on a single machine, \r\non a cluster of machines or on a cloud computing server.\r\n\r\n# Usage examples\r\n\r\nPyBroMo includes a collection of notebooks which serves both as usage examples\r\nand user guide. The notebooks can be read online at:\r\n\r\n- http://nbviewer.ipython.org/github/tritemio/PyBroMo/tree/master/notebooks/\r\n\r\nYou may be also interested in a few notebooks on the theory of Brownian motion\r\nsimulation (they don't require PyBroMo):\r\n\r\n* [Theory - Introduction to Brownian Motion simulation](http://nbviewer.ipython.org/urls/raw.github.com/tritemio/PyBroMo/master/notebooks/Theory%2520-%2520Introduction%2520to%2520Brownian%2520Motion%2520simulation.ipynb)\r\n* [Theory - On Browniam motion and Diffusion coefficient](http://nbviewer.ipython.org/urls/raw.github.com/tritemio/PyBroMo/master/notebooks/Theory%2520-%2520On%2520Browniam%2520motion%2520and%2520Diffusion%2520coefficient.ipynb)\r\n\r\n# Dependencies\r\n\r\n- python 3.3 (or higher)\r\n- numpy 1.8 (or higher)\r\n- matplotlib 1.4.3 (or higher) (with QT backend for the trajectory explorer GUI)\r\n- pytables 3.1 (or later)\r\n- Jupyter notebook 3 (or later)\r\n- [phconvert](http://photon-hdf5.github.io/phconvert/) (0.6.6 or later) to save smFRET Photon-HDF5 files\r\n\r\n# Acknowledgements\r\n\r\nI wish to thank Xavier Michalet for useful discussions.\r\n\r\nThis work was supported by NIH grants R01 GM069709 and R01 GM095904.\r\n\r\n# License\r\n\r\nPyBroMo - A single molecule FRET diffusion simulator in confocal geometry.\r\n\r\nCopyright (C) 2013-2015  Antonino Ingargiola - <tritemio@gmail.com>\r\n\r\n    This program is free software; you can redistribute it and/or\r\n    modify it under the terms of the GNU General Public License\r\n    version 2, as published by the Free Software Foundation.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You can find a full copy of the license in the file LICENSE.txt\r\n","google":"UA-44142116-1","note":"Don't delete this file! It's used internally to help with page regeneration."}